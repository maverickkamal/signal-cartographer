"""
Main game controller for The Signal Cartographer
Manages overall game state and coordinates between systems
"""

import sys
import asyncio
from typing import Optional

from .aethertap_textual import AetherTapTextual
from .signal_system import SignalDetector
from .command_parser import CommandParser


class SignalCartographer:
    """
    Main game controller that manages the AetherTap interface
    and coordinates all game systems.
    """
    
    def __init__(self):
        self.running = False
        self.aethertap: Optional[AetherTap] = None
        self.signal_detector = SignalDetector()
        self.command_parser = CommandParser()
          # Game state
        self.current_sector = "ALPHA-1"
        self.frequency_range = (100.0, 200.0)
        self.focused_signal = None
        
    def run(self):
        """Start the main game loop with curses interface"""
        if not CURSES_AVAILABLE:
            print("=" * 60)
            print("CURSES NOT AVAILABLE - RUNNING IN TEXT MODE")
            print("=" * 60)
            print("Install windows-curses for full terminal interface:")
            print("pip install windows-curses")
            print("=" * 60)
            self._run_text_mode()
            return
            
        try:
            curses.wrapper(self._main_loop)
        except Exception as e:
            print(f"Terminal interface error: {e}")
            print("This game requires a curses-compatible terminal.")
            if sys.platform == "win32":
                print("On Windows, try using Windows Terminal or install windows-curses.")
            print("Falling back to text mode...")
            self._run_text_mode()
    
    def _main_loop(self, stdscr):
        """Main game loop with curses screen"""
        try:
            # Initialize the AetherTap terminal interface
            self.aethertap = AetherTap(stdscr)
            self.aethertap.initialize()
            
            # Setup command parser with game state
            self.command_parser.set_game_state(self)
            
            self.running = True
            
            # Show welcome message
            self.aethertap.show_startup_sequence()
            
            # Main game loop with improved timing
            last_update = 0
            while self.running:
                try:
                    current_time = time.time()
                    
                    # Handle input (non-blocking)
                    key = stdscr.getch()
                    
                    if key != -1:  # Key was pressed
                        result = self.aethertap.handle_input(key)
                        
                        if result == "quit":
                            self.running = False
                        elif result and result.startswith("command:"):
                            # Extract command and process it
                            command = result[8:]  # Remove "command:" prefix
                            self._process_command(command)
                    
                    # Update display less frequently (every 200ms or on input)
                    if key != -1 or current_time - last_update > 0.2:
                        self.aethertap.update_display()
                        last_update = current_time
                    
                    # Small delay to prevent excessive CPU usage
                    time.sleep(0.02)  # 20ms delay
                    
                except KeyboardInterrupt:
                    self.running = False
                    break
                except curses.error:
                    # Handle terminal resize or other curses errors
                    continue
                except Exception as e:
                    if self.aethertap:
                        self.aethertap.show_error(f"Game loop error: {e}")
                        time.sleep(1)  # Show error briefly
                    else:
                        break
                        
        except Exception as e:
            # Terminal initialization failed
            raise Exception(f"Failed to initialize terminal interface: {e}")
    
    def _process_command(self, command_str: str):
        """Process a command entered by the player"""
        try:
            result = self.command_parser.parse_and_execute(command_str)
            
            if result:
                self.aethertap.add_log_entry(result)
                
        except Exception as e:
            self.aethertap.show_error(f"Command error: {e}")
    
    def quit_game(self):
        """Cleanly quit the game"""
        self.running = False
    
    def _run_text_mode(self):
        """Fallback text-only mode when curses is not available"""
        print("\n" + "=" * 60)
        print("  THE SIGNAL CARTOGRAPHER: ECHOES FROM THE VOID")
        print("  Text Mode - Limited Interface")
        print("=" * 60)
        
        # Setup command parser
        self.command_parser.set_game_state(self)
        self.running = True
        
        print("\nWelcome to the AetherTap text interface.")
        print("Type 'help' for available commands, 'quit' to exit.")
        print("")
        
        while self.running:
            try:
                command = input("AetherTap> ").strip()
                if command:
                    if command.lower() in ['quit', 'exit', 'q']:
                        self.running = False
                        print("AetherTap shutting down...")
                        break
                    
                    result = self.command_parser.parse_and_execute(command)
                    if result:
                        print(result)
                        print()
                        
            except KeyboardInterrupt:
                self.running = False
                print("\nSignal lost... AetherTap shutting down.")
            except EOFError:
                self.running = False
                print("\nConnection terminated.")

    # Game state methods for command parser
    def get_current_sector(self) -> str:
        return self.current_sector
    
    def set_current_sector(self, sector: str):
        self.current_sector = sector
        
    def get_frequency_range(self) -> tuple:
        return self.frequency_range
    
    def set_frequency_range(self, freq_range: tuple):
        self.frequency_range = freq_range
        
    def get_focused_signal(self):
        return self.focused_signal
    
    def set_focused_signal(self, signal):
        self.focused_signal = signal
        if self.aethertap:
            self.aethertap.update_focused_signal(signal)
